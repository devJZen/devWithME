[
  {
    "id": 1,
    "category": "JavaScript",
    "question": "클로저(Closure)에 대해 설명해 주세요.",
    "answer": "클로저는 함수와 함수가 선언될 당시의 렉시컬 환경(Lexical Environment)의 조합입니다.\n\n함수가 생성될 때 외부 변수를 기억하고, 함수가 외부 스코프에서 실행되더라도 기억된 변수에 접근할 수 있게 합니다.\n\n주요 특징:\n- 외부 변수에 대한 접근 유지\n- 데이터 은닉 가능\n- 함수형 프로그래밍의 핵심 개념",
    "keywords": ["클로저", "렉시컬 스코프", "자바스크립트", "함수"],
    "referenceText": ["클로저 상세 가이드"],
    "referenceURI": ["https://developer.mozilla.org/ko/docs/Web/JavaScript/Closures"],
    "difficulty": "중급"
  },
  {
    "id": 2,
    "category": "Vue.js",
    "question": "Vue.js의 라이프사이클 훅스(Lifecycle Hooks)에 대해 아는 대로 설명해 주세요.",
    "answer": "Vue 컴포넌트의 생성부터 소멸까지의 과정에서 특정 시점에 자동으로 호출되는 함수들을 라이프사이클 훅스라고 합니다.\n\n주요 라이프사이클 훅스:\n- onMounted: 컴포넌트가 DOM에 마운트된 후 호출\n- onUpdated: 컴포넌트가 업데이트된 후 호출\n- onUnmounted: 컴포넌트가 언마운트되기 전 호출\n\n주로 컴포넌트의 특정 상태 변화에 따른 로직을 수행할 때 사용합니다.",
    "keywords": ["Vue", "라이프사이클", "훅스", "컴포넌트"],
    "referenceText": ["Vue.js 공식 문서 - 라이프사이클 훅스"],
    "referenceURI": ["https://vuejs.org/guide/essentials/lifecycle.html"],
    "difficulty": "초급"
  },
  {
    "id": 3,
    "category": "Network",
    "question": "RESTful API에 대해 설명하고, 구성 요소에 대해 알려주세요.",
    "answer": "RESTful API는 REST 아키텍처 스타일을 따르는 웹 서비스 API입니다.\n\n특징:\n- 자원을 URI로 표현\n- HTTP 메소드(GET, POST, PUT, DELETE)를 통해 자원 조작\n- 무상태(Stateless) 통신\n- 계층화된 시스템 구조\n\n구성 요소:\n1. 자원(Resource): URI로 식별되는 데이터\n2. 행위(Verb): HTTP 메소드로 표현되는 동작\n3. 표현(Representation): JSON, XML 등의 데이터 형식",
    "keywords": ["RESTful", "API", "HTTP"],
    "referenceText": ["REST API 튜토리얼", "HTTP 메소드 상세 가이드"],
    "referenceURI": ["https://restfulapi.net/", "https://developer.mozilla.org/ko/docs/Web/HTTP/Methods"],
    "difficulty": "초급"
  },
  {
    "id": 4,
    "category": "Computer Science",
    "question": "데이터베이스 정규화(Normalization)에 대해 아는 대로 설명해 주세요.",
    "answer": "데이터베이스 정규화는 데이터 중복을 최소화하고 무결성을 유지하기 위해 데이터를 구조화하는 과정입니다. 1차 정규형부터 5차 정규형까지 있으며, 주로 3차 정규형까지 적용하는 것이 일반적입니다.",
    "keywords": ["데이터베이스", "정규화", "DB", "중복"],
    "difficulty": "고급"
  },
  {
    "id": 5,
    "category": "JavaScript",
    "question": "비동기(Asynchronous) 자바스크립트의 중요성과 `async/await`에 대해 설명해 주세요.",
    "answer": "비동기 자바스크립트는 블로킹(Blocking) 없이 작업을 처리하여 사용자 경험을 향상시킵니다. `async/await`은 Promise 기반의 비동기 코드를 동기 코드처럼 읽기 쉽게 작성할 수 있도록 하는 문법입니다. `async` 함수는 Promise를 반환하며, `await`은 Promise가 해결될 때까지 기다립니다.",
    "keywords": ["비동기", "async", "await", "Promise", "자바스크립트"],
    "difficulty": "중급"
  },
  {
    "id": 6,
    "category": "React",
    "question": "React에서 가상 DOM(Virtual DOM)이 무엇인지, 왜 사용하는지 설명해 주세요.",
    "answer": "가상 DOM은 실제 DOM의 가벼운 복사본으로, React가 컴포넌트의 UI를 메모리에 미리 렌더링하는 추상화된 DOM입니다. 실제 DOM 조작은 비용이 많이 들기 때문에, 가상 DOM을 사용하여 변경 사항을 먼저 계산하고 최소한의 실제 DOM 업데이트만 수행하여 성능을 최적화합니다.",
    "keywords": ["React", "가상DOM", "Virtual DOM", "성능"],
    "referenceText": ["React 공식 문서 - Virtual DOM", "가상 DOM 개념 상세 설명"],
    "referenceURI": ["https://react.dev/learn/preserving-and-resetting-state#the-ui-tree", "https://ko.reactjs.org/docs/faq-internals.html"],
    "difficulty": "중급"
  },
  {
    "id": 7,
    "category": "Network",
    "question": "HTTP에 대해서 설명해주세요.",
    "answer": "HTTP란 HyperText Transfer Protocol을 의미하며, 웹에서 클라이언트와 서버 간의 데이터 전송을 위한 프로토콜입니다. 주로 HTML 문서를 전송하는 용도로 사용됩니다. HTTP는 요청(Request)과 응답(Response) 구조로 동작하며, 클라이언트가 서버에 요청을 보내고 서버가 응답을 반환합니다. HTTP는 상태 비저장(stateless) 프로토콜로, 각 요청은 독립적으로 처리됩니다. 보안이 필요한 경우 HTTPS를 사용하여 SSL/TLS 암호화를 적용할 수 있습니다.",
    "keywords": ["Network", "HTTP"],
    "difficulty": "초급"
  },
  {
    "id": 8,
    "category": "Architecture",
    "question": "Spring Boot 프로젝트 개발 시 주로 사용했던 디자인 패턴이나 아키텍처 원칙이 있다면 설명해 주십시오.",
    "answer": "MVC 패턴을 사용하여 애플리케이션의 구조를 분리하고, SOLID 원칙을 적용하여 코드의 유지보수성과 확장성을 높였습니다. 또한, 의존성 주입(Dependency Injection)을 통해 컴포넌트 간의 결합도를 낮추고 테스트 용이성을 향상시켰습니다.",
    "keywords": ["Architecture", "Spring Boot", "Designe Pattern"],
    "difficulty": "중급"
  },
  {
    "id": 9,
    "category": "JavaScript",
    "question": "비동기(Asynchronous) 자바스크립트의 중요성과 `async/await`에 대해 설명해 주세요.",
    "answer": "비동기 자바스크립트는 블로킹(Blocking) 없이 작업을 처리하여 사용자 경험을 향상시킵니다. `async/await`은 Promise 기반의 비동기 코드를 동기 코드처럼 읽기 쉽게 작성할 수 있도록 하는 문법입니다. `async` 함수는 Promise를 반환하며, `await`은 Promise가 해결될 때까지 기다립니다.",
    "keywords": ["비동기", "async", "await", "Promise", "자바스크립트"],
    "difficulty": "중급"
  },
  {
    "id": 10,
    "category": "React",
    "question": "React에서 가상 DOM(Virtual DOM)이 무엇인지, 왜 사용하는지 설명해 주세요.",
    "answer": "가상 DOM은 실제 DOM의 가벼운 복사본으로, React가 컴포넌트의 UI를 메모리에 미리 렌더링하는 추상화된 DOM입니다. 실제 DOM 조작은 비용이 많이 들기 때문에, 가상 DOM을 사용하여 변경 사항을 먼저 계산하고 최소한의 실제 DOM 업데이트만 수행하여 성능을 최적화합니다.",
    "keywords": ["React", "가상DOM", "Virtual DOM", "성능"],
    "difficulty": "중급"
  },
  {
    "id": 11,
    "category": "CSS",
    "question": "Flexbox와 Grid 레이아웃의 차이점에 대해 설명해 주세요.",
    "answer": "Flexbox는 1차원 레이아웃을 구성하는 데 최적화되어 있으며, 주로 행 또는 열 방향으로 아이템을 정렬합니다. 반면 Grid 레이아웃은 2차원 레이아웃을 구성할 수 있어 행과 열 모두를 동시에 제어할 수 있습니다. Flexbox는 콘텐츠의 크기에 따라 자동으로 조정되지만, Grid는 명시적으로 행과 열을 정의할 수 있습니다.",
    "keywords": ["CSS", "Flexbox", "Grid", "레이아웃"],
    "difficulty": "초급"
  },
  {
    "id": 12,
    "category": "TypeScript",
    "question": "TypeScript의 장점과 단점에 대해 설명해 주세요.",
    "answer": "TypeScript는 JavaScript의 상위 집합으로, 정적 타입 검사와 인터페이스, 제네릭 등의 기능을 제공합니다. 장점으로는 코드의 가독성과 유지보수성이 향상되고, IDE에서의 자동 완성 및 오류 검출이 용이합니다. 단점으로는 초기 설정이 복잡할 수 있고, JavaScript에 비해 컴파일 시간이 길어질 수 있습니다.",
    "keywords": ["TypeScript", "장점", "단점", "정적 타입"],
    "difficulty": "초급"
  },
  {
    "id": 13,
    "category": "BlockChain",
    "question": "스테이블코인과 알트코인의 차이점에 대해서 설명해주세요.",
    "answer": "스테이블 코인은 법정화폐나 자산에 가치를 연동하여 가격 변동성을 최소화한 암호화폐입니다. 알트코인은 비트코인 외의 다른 암호화폐를 의미하며, 다양한 기능과 목적을 가지고 있습니다. 비트코인은 최초의 암호화폐로, 분산형 디지털 통화를 목표로 합니다.",
    "keywords": ["BlockChain", "StableCoin", "AltCoin", "BitCoin"],
    "difficulty": "초급"
  },
  {
    "id": 14,
    "category": "BlockChain",
    "question": "알트코인에 대해서 설명해주세요.",
    "answer": "Alternative Coin, 즉 알트코인은 비트코인 외의 다른 암호화폐를 의미합니다. 알트코인은 다양한 기능과 목적을 가지고 있으며, 예를 들어 이더리움은 스마트 계약 기능을 제공하고, 리플은 금융 거래의 효율성을 높이는 데 중점을 둡니다. 알트코인은 비트코인에 비해 가격 변동성이 크고, 기술적 혁신이 활발하게 이루어지고 있습니다.",
    "keywords": ["BlockChain", "AltCoin", "설명"],
    "difficulty": "초급"
  },
  {
    "id": 15,
    "category": "BlockChain",
    "question": "중앙화 거래소와 탈중앙화 거래소의 차이점에 대해 설명해주세요.",
    "answer": "중앙화 거래소(Centralized Exchange, CEX)는 중앙 기관이 운영하며, 사용자가 자산을 거래하기 위해 해당 기관에 자산을 맡깁니다. 반면 탈중앙화 거래소(Decentralized Exchange, DEX)는 블록체인 기술을 기반으로 하여 중앙 기관 없이 사용자 간 직접 거래를 지원합니다. CEX는 사용자 친화적인 인터페이스와 높은 유동성을 제공하지만, 해킹 위험이 존재합니다. DEX는 보안성이 높고 개인 정보 보호가 강화되지만, 사용이 복잡할 수 있습니다.",
    "keywords": ["BlockChain", "CEX", "DEX", "거래소"],
    "difficulty": "초급"
  },
  {
    "id": 16,
    "category": "BlockChain",
    "question": "솔라나의 합의 매커니즘인 PoH와 블록체인의 보편적인 합의 매커니즘인 PoS를 설명해주세요.",
    "answer": "솔라나는 다른 블록체인과 달리 독자적인 합의 매커니즘 PoH와 PoS를 함께 사용합니다. PoH(Proof of History)는 블록체인에서 시간의 흐름을 증명하는 메커니즘으로, 트랜잭션의 순서를 기록하고 검증하는 데 사용됩니다. PoS(Proof of Stake)는 블록체인 네트워크의 보안을 유지하기 위해 사용자가 자신의 암호화폐를 '스테이킹'하여 블록 생성 권한을 얻는 방식입니다. PoH는 시간 증명에 중점을 두고, PoS는 자산의 양에 따라 블록 생성 권한을 부여합니다.",
    "keywords": ["BlockChain", "PoH", "PoS", "Solana", "합의 매커니즘"],
    "difficulty": "초급"
  },
  {
    "id": 17,
    "category": "BlockChain",
    "question": "DApp(탈중앙화 애플리케이션)과 일반 애플리케이션의 차이점에 대해 설명해주세요.",
    "answer": "DApp(Decentralized Application)은 블록체인 기술을 기반으로 하여 중앙 서버 없이 분산 네트워크에서 운영되는 애플리케이션입니다. 일반 애플리케이션은 중앙 서버에 의존하여 데이터를 저장하고 처리합니다. DApp은 사용자 데이터의 보안성과 개인 정보 보호를 강화하며, 검열 저항성이 높습니다. 또한, 스마트 계약을 통해 자동화된 거래와 프로세스를 지원합니다. 반면 일반 애플리케이션은 중앙 기관의 관리 하에 있어 보안과 신뢰성에 취약할 수 있습니다.",
    "keywords": ["BlockChain", "DApp"],
    "difficulty": "초급"
  },
  {
    "id": 18,
    "category": "BlockChain",
    "question": "PDA에 대해 설명해주세요.",
    "answer": "PDA(Program Derived Address)는 솔라나 블록체인에서 프로그램이 생성한 주소로, 특정 프로그램에 의해 관리되는 계정입니다. PDA는 프로그램의 상태를 저장하고, 프로그램이 특정 작업을 수행할 수 있도록 합니다. PDA는 일반적으로 프로그램의 공개 키와 특정 시드(seed)를 조합하여 생성되며, 이로 인해 해당 프로그램에만 접근할 수 있는 고유한 주소가 만들어집니다. PDA는 스마트 계약과 유사한 기능을 제공하며, 분산 애플리케이션(DApp)에서 중요한 역할을 합니다.",
    "keywords": ["BlockChain", "PDA", "Solana"],
    "difficulty": "초급"
  },
  {
    "id": 19,
    "category": "BlockChain",
    "question": "CPI에 대해 설명해주세요.",
    "answer": "CPI(Cross-Program Invocation)는 솔라나 블록체인에서 프로그램 간의 호출을 가능하게 하는 메커니즘입니다. 이를 통해 하나의 프로그램이 다른 프로그램의 기능을 호출하고, 데이터를 공유할 수 있습니다. CPI는 스마트 계약 간의 상호작용을 지원하며, 복잡한 분산 애플리케이션(DApp)을 구축하는 데 중요한 역할을 합니다. CPI를 사용하면 개발자는 모듈화된 코드를 작성할 수 있어 재사용성과 유지보수성을 높일 수 있습니다.",
    "keywords": ["BlockChain", "CPI", "Solana"],
    "difficulty": "초급"
  },
  {
    "id": 20,
    "category": "BlockChain",
    "question": "솔라나에 대해서 기술적인 설명해주세요.",
    "answer": "솔라나에서 모든 데이터는 Accounts에 저장됩니다. 솔라나는 다른 블록체인에서 Smart Contract라고 불리는 개념을 Program이라고 부릅니다. Account는 이더리움의 Wallet이나 Contract와 유사한 개념으로, 프로그램이 데이터를 저장하고 처리하는 단위입니다. 솔라나의 특징 중 하나는 높은 처리 속도와 낮은 거래 수수료를 제공하는 것입니다. 이는 PoH(Proof of History)와 PoS(Proof of Stake) 합의 매커니즘을 결합하여 구현됩니다. 솔라나는 DApp 개발에 최적화된 환경을 제공하며, 다양한 분산 애플리케이션을 지원합니다.",
    "keywords": ["BlockChain", "Solana"],
    "difficulty": "초급"
  },
  {
    "id": 21,
    "category": "BlockChain",
    "question": "Rust의 Ownership에 대해 설명해주세요.",
    "answer": "Rust의 Ownership은 메모리 안전성을 보장하기 위한 핵심 개념입니다. Rust에서는 각 값이 하나의 소유자(Owner)를 가지며, 소유자는 해당 값을 관리하고 메모리를 해제할 책임이 있습니다. Ownership은 세 가지 규칙을 따릅니다: 1) 각 값은 단 하나의 소유자를 가집니다. 2) 소유자가 범위를 벗어나면 해당 값은 자동으로 메모리에서 해제됩니다. 3) 소유권은 다른 변수로 이동(Move)할 수 있지만, 복사(Copy)는 불가능합니다. 이로 인해 Rust는 런타임 오류 없이 컴파일 타임에 메모리 안전성을 검증할 수 있습니다.",
    "keywords": ["BlockChain", "Rust", "Ownership"],
    "difficulty": "초급"
  },
  {
    "id": 22,
    "category": "BlockChain",
    "question": "BPF에 대해 설명해주세요.",
    "answer": "BPF(Berkeley Packet Filter)는 네트워크 패킷 필터링을 위한 기술로, C 기반의 가상 머신에서 실행됩니다. BPF는 고성능과 안전성을 제공하며, 다양한 프로그래밍 언어로 작성된 코드를 실행할 수 있습니다. 솔라나에서는 BPF를 사용하여 프로그램을 작성하고, 이를 통해 트랜잭션을 처리하고 상태를 관리합니다. BPF는 효율적인 메모리 사용과 빠른 실행 속도를 제공하여, 솔라나의 높은 처리량과 낮은 지연 시간을 지원합니다.",
    "keywords": ["BlockChain", "BPF", "Solana", "Rust"],
    "difficulty": "초급"
  },
  {
    "id": 23,
    "category": "Network",
    "question": "HTTP 메서드(Method)에 대해 설명해주세요.",
    "answer": "HTTP 메서드는 클라이언트가 서버에 요청을 보낼 때 사용하는 방법입니다. 주요 메서드로는 GET, POST, PUT, DELETE가 있습니다. GET은 데이터를 조회할 때 사용하고, POST는 데이터를 생성할 때, PUT은 데이터를 업데이트할 때, DELETE는 데이터를 삭제할 때 사용됩니다. 각 메서드는 특정한 목적과 의미를 가지며, RESTful API 설계에서 중요한 역할을 합니다.",
    "keywords": ["Network", "HTTP", "RESTful"],
    "difficulty": "초급"
  },
  {
    "id": 24,
    "category": "Network",
    "question": "RESTful API 설계에서 사용하는 멱등성에 대해 설명해주세요.",
    "answer": "멱등성이란 동일한 요청을 여러 번 실행해도 결과가 동일하다는 것을 의미합니다. RESTful API에서 GET, DELETE 메서드는 멱등성을 가지며, PUT 메서드는 요청에 따라 달라지고, POST 메서드는 멱등성을 가지지 않습니다. 멱등성은 네트워크 장애나 중복 요청 시 안전한 처리를 보장하는 데 중요한 개념입니다.",
    "keywords": ["Network", "HTTP", "RESTful"],
    "difficulty": "초급"
  },
  {
    "id": 25,
    "category": "Network",
    "question": "HTTP 메서드인 GET에 대해 설명해주세요.",
    "answer": "GET 메서드는 클라이언트가 서버로부터 데이터를 요청할 때 사용되는 HTTP 메서드입니다. GET 요청은 서버에 저장된 자원을 조회하는 데 사용되며, 서버의 상태를 변경하지 않는 안전한 메서드입니다. 또한 멱등성을 가지며, 캐싱이 가능합니다. 데이터는 URL의 쿼리 파라미터를 통해 전달됩니다.",
    "keywords": ["Network", "HTTP", "RESTful"],
    "difficulty": "초급"
  },
  {
    "id": 26,
    "category": "Network",
    "question": "HTTP 메서드인 POST에 대해 설명해주세요.",
    "answer": "서버에 데이터를 제출하여 새로운 리소스를 생성하거나, 기존 리소스에 데이터를 추가하거나, 특정 작업을 수행하도록 요청한다. POST 요청은 서버의 상태를 변경할 수 있으며, 여러 번 반복해서 요청할 경우 매번 다른 결과(예: 새로운 리소스 생성)를 가져올 수 있으므로 안전하지 않고 멱등성도 없다.",
    "keywords": ["Network", "HTTP", "RESTful"],
    "difficulty": "초급"
  },
  {
    "id": 27,
    "category": "Network",
    "question": "HTTP 메서드인 PUT에 대해 설명해주세요.",
    "answer": "요청 본문에 포함된 데이터로 대상 리소스 전체를 대체하거나, 해당 리소스가 존재하지 않으면 새로 생성한다. PUT 요청은 동일한 요청을 여러 번 보내도 결과가 동일하므로 멱등성을 가진다.",
    "keywords": ["Network", "HTTP", "RESTful"],
    "difficulty": "초급"
  },
  {
    "id": 28,
    "category": "Network",
    "question": "HTTP 메서드인 DELETE에 대해 설명해주세요.",
    "answer": "특정 리소스를 삭제하도록 요청한다. DELETE 요청은 여러 번 반복해도 동일하게 리소스가 삭제된 상태를 유지하므로 멱등성을 가진다.",
    "keywords": ["Network", "HTTP", "RESTful"],
    "difficulty": "초급"
  }
]
